name: Process level-2

on:
  push:
    branches:
      - main
    paths:
      - "platform/level-2/**.json"
  pull_request:
    branches:
      - main
    paths:
      - "platform/level-2/**.json"
  workflow_dispatch: {}

env:
  Location: 'westeurope'
  ManagementGroupPrefix: 'alz'
  LoggingResourceGroupName: 'alz-logging-rg'
  NetworkingResourceGroupName: 'alz-networking-rg'
  TopLevelManagementGroupDisplayName: 'Azure Landing Zones'
  DeployAlzDefaultPolicies: true

jobs:
  validate_bicep:
    name: 'Validate Bicep files'
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: BicepDemo - Validate Bicep Files
        shell: pwsh
        run: |
          bicep build alz-source/infra-as-code/bicep/modules/logging/logging.bicep
          bicep build alz-source/infra-as-code/bicep/modules/hubNetworking/hubNetworking.bicep
          bicep build alz-source/infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep
      
  check_mg:
    name: 'Check if management group exist'
    needs: validate_bicep
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      MG_EXISTS: ${{ steps.check_mg.outputs.MG_EXISTS }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          allow-no-subscriptions: true
      
      - name: Check if top level management group exists
        id: check_mg
        shell: pwsh
        run: |
          $check = az account management-group list --query "[?name=='${{ env.ManagementGroupPrefix }}']" | ConvertFrom-Json
          if ($check){
            Write-Output '::set-output name=MG_EXISTS::true'
          } else {
            Write-Output '::set-output name=MG_EXISTS::false'
          }
  validate_logging:
    name: "Logging What-If"
    needs: check_mg
    if: ${{ github.event_name == 'pull_request' && needs.check_mg.outputs.MG_EXISTS == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PLATFORM }}
          enable-AzPSSession: false

      - name: Az CLI What-If Logging
        id: create_logging_whatif
        shell: pwsh
        run: |
            az group create --name ${{ env.LoggingResourceGroupName }} --location ${{ env.Location }}
            az deployment group what-if --resource-group ${{ env.LoggingResourceGroupName }} `
              --template-file  alz-source/infra-as-code/bicep/modules/logging/logging.bicep `
              --parameters @platform/level-2/logging/logging.parameters.json ` | Tee-Object -Variable policyOutput
            if ($policyOutput.length -gt 65536) {
              $policyOutput = $policyOutput.Substring(0,65000)
              $policyOutput += "`nTruncated"
            }
            $policyOutput | Out-File -FilePath /tmp/policyOutput.md -Encoding UTF8 -Force
      
      - name: Post logging output to PR
        shell: pwsh
        if: ${{ github.event_name == 'pull_request' && steps.create_logging_whatif.outcome == 'success' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/policyOutput.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  confirm_net_log:
    name: 'Confirm deployment'
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: CONFIRM
    steps:
      - run: echo "Confirm Network and Logging deployment"

  deploy_logging:
    name: "Logging Deployment"
    needs: confirm_net_log
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PLATFORM }}
          enable-AzPSSession: false

      - name: Az CLI Create Logging
        id: create_logging
        shell: pwsh
        run: |
            az deployment group create --resource-group ${{ env.LoggingResourceGroupName }} `
              --template-file  alz-source/infra-as-code/bicep/modules/logging/logging.bicep `
              --parameters @platform/level-2/logging/logging.parameters.json `

  validate_hubNetworking:
    name: "HubNetworking What-If"
    needs: check_mg
    if: ${{ github.event_name == 'pull_request' && needs.check_mg.outputs.MG_EXISTS == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PLATFORM }}
          enable-AzPSSession: false

      - name: Az CLI What-If Hub Networking
        id: create_hubnetworking_whatif
        shell: pwsh
        run: |
            az group create --name ${{ env.NetworkingResourceGroupName }} --location ${{ env.Location }}
            az deployment group what-if --resource-group ${{ env.NetworkingResourceGroupName }} `
              --template-file alz-source/infra-as-code/bicep/modules/hubNetworking/hubNetworking.bicep `
              --parameters @platform/level-2/hubNetworking/hubNetworking.parameters.json ` | Tee-Object -Variable networkOutput
            if ($networkOutput.length -gt 65536) {
              $networkOutput = $networkOutput.Substring(0,65000)
              $networkOutput += "`nTruncated"
            }
            $networkOutput | Out-File -FilePath /tmp/networkOutput.md -Encoding UTF8 -Force
      
      - name: Post logging output to PR
        shell: pwsh
        if: ${{ github.event_name == 'pull_request' && steps.create_hubnetworking_whatif.outcome == 'success' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/networkOutput.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  deploy_hubNetworking:
    name: "HubNetworking Deployment"
    needs: confirm_net_log
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PLATFORM }}
          enable-AzPSSession: false
          allow-no-subscriptions: true

      - name: Az CLI Deploy Networking
        id: create_hubnetworking
        shell: pwsh
        run: |
            az deployment group create --resource-group ${{ env.NetworkingResourceGroupName }} `
              --template-file alz-source/infra-as-code/bicep/modules/hubNetworking/hubNetworking.bicep `
              --parameters @platform/level-2/hubNetworking/hubNetworking.parameters.json `

  validate_policyassignments:
    name: "Policy Assignments What-If"
    needs: ['validate_hubNetworking', 'validate_logging']
    if: ${{ github.event_name == 'pull_request' && needs.check_mg.outputs.MG_EXISTS == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          allow-no-subscriptions: true

      - name: Az CLI What-If Policy Assignments
        id: create_policyassignments_whatif
        shell: pwsh
        run: |
          New-Item -Path /tmp/ -Name policy -ItemType Directory -Force
          foreach ($file in (Get-ChildItem -path platform/level-2/policyAssignments -Recurse -Include '*.json')) {
            az deployment mg what-if --template-file alz-source/infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep `
            --parameters "@platform/level-2/policyAssignments/$($file.Name)" `
            --location ${{ env.Location }} `
            --management-group-id "${{ env.ManagementGroupPrefix }}-landingzones" | Tee-Object -Variable $($file.baseName)
            $output = (Get-Variable -Name $($file.baseName)).Value
            if ($output.length -gt 65536) {
              $output = $var.Value.Substring(0,65000)
              $output += "`nTruncated"
            }
            $output | Out-File -FilePath "/tmp/policy/$($file.baseName).md" -Encoding UTF8 -Force
          }
          if ( ${{ env.DeployAlzDefaultPolicies }} -eq 'true' ) {
            az deployment mg what-if `
            --template-file  alz-source/infra-as-code/bicep/modules/policy/assignments/alzDefaults/alzDefaultPolicyAssignments.bicep `
            --parameters "@platform/level-2/alzDefaultPolicies/alzDefaultPolicyAssignments.parameters.json" `
            --location ${{ env.Location }} `
            --management-group-id ${{ env.ManagementGroupPrefix }} `
            --parameters parTopLevelManagementGroupPrefix=${{ env.ManagementGroupPrefix }} `
            --parameters parLogAnalyticsWorkSpaceAndAutomationAccountLocation=${{ env.Location }} `
            --exclude-change-types Ignore, NoChange | Tee-Object -Variable alzDefaultPolicies
            $output = $alzDefaultPolicies
            if ($output.length -gt 65536) {
              $output = $var.Value.Substring(0,65000)
              $output += "`nTruncated"
            }
            $output | Out-File -FilePath "/tmp/policy/alzDefaultPolicies.md" -Encoding UTF8 -Force
          }
      
      - name: Post policy assignments output to PR
        shell: pwsh
        if: ${{ github.event_name == 'pull_request' && steps.create_policyassignments_whatif.outcome == 'success' }}
        run: |
          foreach ($file in (Get-ChildItem /tmp/policy)) {
            gh pr comment ${{ github.event.pull_request.number }} --body-file ($file.FullName)
          }
          if ( ${{ env.DeployAlzDefaultPolicies }} -eq $true ) {
            gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/policy/alzDefaultPolicies.md
          }
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate_roleassignments:
    name: "Role Assignments What-If"
    needs: ['validate_hubNetworking', 'validate_logging']
    if: ${{ github.event_name == 'pull_request' && needs.check_mg.outputs.MG_EXISTS == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          allow-no-subscriptions: true

      - name: Az CLI What-If Role Assignments
        id: create_roleassignments_whatif
        shell: pwsh
        run: |
          New-Item -Path /tmp/ -Name role -ItemType Directory -Force
          foreach ($file in (Get-ChildItem -path platform/level-2/roleAssignments -Recurse -Include '*.json')) {
            az deployment mg what-if --template-file alz-source/infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep `
            --parameters "@platform/level-2/roleAssignments/$($file.Name)" `
            --location ${{ env.Location }} `
            --management-group-id "${{ env.ManagementGroupPrefix }}-landingzones" | Tee-Object -Variable $($file.baseName)
            $output = (Get-Variable -Name $($file.baseName)).Value
            if ($output.length -gt 65536) {
              $output = $var.Value.Substring(0,65000)
              $output += "`nTruncated"
            }
            $output | Out-File -FilePath "/tmp/role/$($file.baseName).md" -Encoding UTF8 -Force
          }
      
      - name: Post role assignments output to PR
        shell: pwsh
        if: ${{ github.event_name == 'pull_request' && steps.create_roleassignments_whatif.outcome == 'success' }}
        run: |
          foreach ($file in (Get-ChildItem /tmp/role)) {
            gh pr comment ${{ github.event.pull_request.number }} --body-file ($file.FullName)
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  confirm_policy_role:
    name: 'Confirm deployment'
    needs: ['deploy_logging', 'deploy_hubNetworking']
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: CONFIRM
    steps:
      - run: echo "Confirm Policy and Role Assignments deployment"

  deploy_policyassignments:
    name: "Policy Assignments Deployment"
    needs: confirm_policy_role
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          allow-no-subscriptions: true

      - name: Az CLI Deploy Policy Assignments
        id: create_policyassignments
        shell: pwsh
        run: |
          foreach ($file in (Get-ChildItem -path platform/level-2/policyAssignments -Recurse -Include '*.json')) {
            az deployment mg create --template-file alz-source/infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep `
            --parameters "@platform/level-2/policyAssignments/$($file.Name)" `
            --location ${{ env.Location }} `
            --management-group-id "${{ env.ManagementGroupPrefix }}-landingzones"
          }
          if ( ${{ env.DeployAlzDefaultPolicies }} -eq $true ) {
            az deployment mg create `
            --template-file alz-source/infra-as-code/bicep/modules/policy/assignments/alzDefaults/alzDefaultPolicyAssignments.bicep `
            --parameters "@platform/level-2/alzDefaultPolicies/alzDefaultPolicyAssignments.parameters.json" `
            --location ${{ env.Location }} `
            --management-group-id ${{ env.ManagementGroupPrefix }} `
            --parameters parTopLevelManagementGroupPrefix=${{ env.ManagementGroupPrefix }} `
            --parameters parLogAnalyticsWorkSpaceAndAutomationAccountLocation=${{ env.Location }}
          }
  deploy_roleassignments:
    name: "Role Assignments Deployment"
    needs: confirm_policy_role
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          allow-no-subscriptions: true

      - name: Az CLI Deploy Role Assignments
        id: create_roleassignments
        shell: pwsh
        run: |
          foreach ($file in (Get-ChildItem -path platform/level-2/roleAssignments -Recurse -Include '*.json')) {
            az deployment mg create --template-file alz-source/infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep `
            --parameters "@platform/level-2/roleAssignments/$($file.Name)" `
            --location ${{ env.Location }} `
            --management-group-id "${{ env.ManagementGroupPrefix }}-landingzones"
          }