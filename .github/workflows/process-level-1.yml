name: Process level-1

on:
  pull_request:
    branches:
      - main
    paths:
      - "alz-source/infra-as-code/bicep/modules/managementGroups/managementGroups.bicep"
      - "alz-source/infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep"
      - "alz-source/infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep"
      - "alz-source/infra-as-code/bicep/modules/policy/assignments/policyAssignmentManagementGroup.bicep"
      - "alz-source/infra-as-code/bicep/modules/subscriptionPlacement/subscriptionPlacement.bicep"
      - "alz-source/infra-as-code/bicep/modules/roleAssignments/roleAssignmentManagementGroup.bicep"
      - "platform/level-1/**.bicep"
      - "platform/level-1/**.json"
  workflow_dispatch: {}

env:
  Location: 'westeurope'
  ManagementGroupPrefix: 'alz'
  TopLevelManagementGroupDisplayName: 'Azure Landing Zones'

jobs:
  validate_bicep:
    name: 'Validate Bicep files'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: BicepDemo - Validate Bicep Files
        shell: pwsh
        run: |
          bicep build alz-source/infra-as-code/bicep/modules/managementGroups/managementGroups.bicep
          bicep build alz-source/infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep
          bicep build alz-source/infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep
  
  validate_mg:
    name: 'Management Group What-If'
    needs: validate_bicep
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true
      
      - name: Az CLI What-If Management Groups
        id: create_mgs_whatif
        if: ${{ github.event_name == 'pull_request' }}
        shell: pwsh
        run: |
          az deployment tenant what-if --template-file alz-source/infra-as-code/bicep/modules/managementGroups/managementGroups.bicep `
            --parameters @platform/level-1/managementGroups/managementGroups.parameters.json `
            --location ${{ env.Location }} | Tee-Object -Variable mgOutput
          $mgOutput | Out-File -FilePath /tmp/mgOutput.md -Encoding UTF8 -Force
        
      - name: BicepDemo - Post MG output
        shell: pwsh
        if: ${{ github.event_name == 'pull_request' && steps.create_mgs_whatif.outcome == 'success' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/mgOutput.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  confirm_mg:
    name: 'Confirm Management Group deployment'
    needs: validate_mg
    runs-on: ubuntu-latest
    environment: CONFIRM
    steps:
      - run: echo "Confirm deployment"

  deploy_mg:
    name: 'Deploy Management Groups'
    needs: confirm_mg
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true
      
      - name: Az CLI Create Management Groups
        id: create_mgs_whatif
        if: ${{ github.event_name == 'pull_request' }}
        shell: pwsh
        run: |
          az deployment tenant create --template-file alz-source/infra-as-code/bicep/modules/managementGroups/managementGroups.bicep `
            --parameters @platform/level-1/managementGroups/managementGroups.parameters.json `
            --location ${{ env.Location }}

  validate_policy:
    name: "Custom Policy Definitions What-If"
    needs: deploy_mg
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      - name: Az CLI What-If Custom Policy Definitions
        id: create_policy_defs_whatif
        if: ${{ github.event_name == 'pull_request'}}
        shell: pwsh
        run: |
            az deployment mg what-if --template-file  alz-source/infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep `
              --parameters @platform/level-1/policyDefinitions/custom-policy-definitions.parameters.example.json `
              --location ${{ env.Location }} `
              --management-group-id ${{ env.ManagementGroupPrefix }} | Tee-Object -Variable policyOutput
            $policyOutput | Out-File -FilePath /tmp/policyOutput.md -Encoding UTF8 -Force
      
      - name: Post policy output to PR
        shell: pwsh
        if: ${{ github.event_name == 'pull_request' && steps.create_policy_defs_whatif.outcome == 'success' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/policyOutput.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  validate_rbac:
    name: "Custom Role Definitions What-If"
    needs: deploy_mg
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true
      
      - name: Az CLI What-If Custom Role Definitions
        id: create_rbac_roles_whatif
        if: ${{ github.event_name == 'pull_request' }}
        shell: pwsh
        run: |
            az deployment mg what-if --template-file  alz-source/infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep `
              --parameters @platform/level-1/customRoleDefinitions/customRoleDefinitions.parameters.json `
              --location ${{ env.Location }} `
              --management-group-id ${{ env.ManagementGroupPrefix }} | Tee-Object -Variable rbacOutput
            $rbacOutput | Out-File -FilePath /tmp/rbacOutput.md -Encoding UTF8 -Force

      - name: Post RBAC output to PR
        shell: pwsh
        if: ${{ github.event_name == 'pull_request' && steps.create_rbac_roles_whatif.outcome == 'success' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/rbacOutput.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  confirm_policy_rbac:
    name: 'Confirm Custom Role Definitions and RBAC Deployment'
    needs: ['validate_rbac', 'validate_policy']
    runs-on: ubuntu-latest
    environment: CONFIRM
    steps:
      - run: echo "Confirm deployment"
  
  deploy_policy:
    name: "Deploy Custom Policy Definitions"
    needs: confirm_policy_rbac
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

      - name: Az CLI Create Custom Policy Definitions
        id: create_policy_defs_whatif
        if: ${{ github.event_name == 'pull_request'}}
        shell: pwsh
        run: |
            az deployment mg create --template-file  alz-source/infra-as-code/bicep/modules/policy/definitions/custom-policy-definitions.bicep `
              --parameters @platform/level-1/policyDefinitions/custom-policy-definitions.parameters.example.json `
              --location ${{ env.Location }} `
              --management-group-id ${{ env.ManagementGroupPrefix }} | Tee-Object -Variable policyOutput
            $policyOutput | Out-File -FilePath /tmp/policyOutput.md -Encoding UTF8 -Force
  
  deploy_rbac:
    name: "Deploy Custom Role Definitions"
    needs: confirm_policy_rbac
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          allow-no-subscriptions: true
      
      - name: Az CLI Create Custom Role Definitions
        id: create_rbac_roles_whatif
        if: ${{ github.event_name == 'pull_request' }}
        shell: pwsh
        run: |
            az deployment mg create --template-file  alz-source/infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep `
              --parameters @platform/level-1/customRoleDefinitions/customRoleDefinitions.parameters.json `
              --location ${{ env.Location }} `
              --management-group-id ${{ env.ManagementGroupPrefix }} | Tee-Object -Variable rbacOutput
            $rbacOutput | Out-File -FilePath /tmp/rbacOutput.md -Encoding UTF8 -Force

      # - uses: technote-space/get-diff-action@v6
      #   id: diff_action
      #   with:
      #     PATTERNS: |
      #       platform/level-1/**.json


      # - name: What-If deployment
      #   id: whatifdeployment
      #   shell: pwsh
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     foreach ($file in ${{ env.GIT_DIFF }}) {
      #       if ($file -eq "managementGroups.parameters.json"){
      #         # Perform what-if deployment and output to variable and console
      #         az deployment tenant what-if `
      #         --template-file demos/flex/hub-spoke/solutions/tieredapp/deploy.bicep |
      #         Tee-Object -Variable managementGroupsOutput
              
      #         # Set content of temporary output markdown file
      #         $managementGroupsOutput | Out-File -FilePath /tmp/managementGroupsOutput.md -Encoding UTF8 -Force
      #       } elseif ($file -eq "customRoleDefinitions.parameters.json") {
      #         # Perform what-if deployment and output to variable and console
      #         az deployment mg create --template-file infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.bicep  --parameters @infra-as-code/bicep/modules/customRoleDefinitions/customRoleDefinitions.parameters.example.json --location ${{ env.Location }} --management-group-id ${{ env.ManagementGroupPrefix }}
      #         az deployment tenant what-if `
      #         --template-file demos/flex/hub-spoke/solutions/tieredapp/deploy.bicep |
      #         Tee-Object -Variable customRoleDefinitionsOutput
              
      #         # Set content of temporary output markdown file
      #         $customRoleDefinitionsOutput | Out-File -FilePath /tmp/customRoleDefinitionsOutput.md -Encoding UTF8 -Force
      #       } elseif ($file -eq "custom-policy-definitions.paramers.json") {
      #         # Perform what-if deployment and output to variable and console
      #         az deployment tenant what-if `
      #         --template-file demos/flex/hub-spoke/solutions/tieredapp/deploy.bicep |
      #         Tee-Object -Variable customPolicyDefinitionsOutput

      #         # Set content of temporary output markdown file
      #         $customPolicyDefinitionsOutput | Out-File -FilePath /tmp/customPolicyDefinitionsOutput.md -Encoding UTF8 -Force
      #       }
      #     }